<?php

/**
 * Implements hook_menu().
 */
function smwyg_menu() {
  $items = [];

  //@todo: have a better name than page
  $items['admin/content/smwyg/add'] = [
    'title' => "Create a new {page}",
    'description' => '',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['smwyg_create_new_form'],
    'access callback' => TRUE,
  ];

  return $items;
}


function smwyg_create_new_form($form, &$form_state) {

  $form['item_path'] = [
    '#type' => 'textfield',
    '#title' => t('Path'),
    '#required' => TRUE,
  ];

  // get node type list
  $node_types = node_type_get_names();

  // This form will be rebuild when a node_type is selected.
  // If there is a selected value, that value should be maintained.
  $selected = isset($form_state['values']['node_type']) ? $form_state['values']['node_type'] : NULL;


  $form['node_type'] = [
    '#type' => 'select',
    '#title' => t('Node type'),
    '#options' => $node_types,
    '#required' => TRUE,
    '#ajax' => [
      'callback' => 'smwyg_dependent_content_type_callback',
      'wrapper' => 'node_selection',
    ],
  ];
  if (isset($selected)) {
    $form['node_type']['#defalut_value'] = $selected;
  }

  // Build the sortable table header.
  $header = [
    'title' => ['data' => t('Title')],
    'type' => ['data' => t('Type')],
    'author' => t('Author'),
    'status' => ['data' => t('Status')],
    'changed' => ['data' => t('Updated'),],
    'created' => ['data' => t('Created'),],
  ];

  $form['node_selection'] = [
    '#type' => 'tableselect',
    '#header' => $header,
    '#prefix' => '<div id="node_selection">',
    '#suffix' => '</div>',
    '#options' => _smwyg_ajax_get_node_selection_options($selected),
    '#empty' => t('No content'),
  ];


  $form['submit_button'] = [
    '#type' => 'submit',
    '#value' => t('Submit!'),
  ];

  return $form;
}

function smwyg_create_new_form_validate($form, &$form_state) {

}

function smwyg_create_new_form_submit($form, &$form_state) {

}

function smwyg_dependent_content_type_callback($form, &$form_state) {
  return $form['node_selection'];
}

function _smwyg_ajax_get_node_selection_options($key) {
  if (isset($key)) {
    //Get the node data.
    $q = db_select('node', 'n')
      ->fields('n', ['nid'])
      ->condition('type', $key)
      ->condition('status', TRUE)
      ->orderBy('changed', 'DESC');

    $nids = $q->execute()->fetchCol();
    $nodes = node_load_multiple($nids);
    $options = [];
    foreach ($nodes as $node) {
      $options[$node->nid] = [
        'title' => $node->title,
        'type' => $node->type,
        'author' => theme('username', ['account' => $node]),
        'status' => $node->status ? t('published') : t('not published'),
        'changed' => format_date($node->changed, 'short'),
        'created' => format_date($node->created, 'short'),
      ];
    }
    return $options;
  }
}


/**
 * Implements hook_block_info().
 */
function smwyg_block_info() {
  $blocks['smwyg_test_display'] = [
    'info' => t('SHOW ME WHAT YOU GOT!'),
  ];
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function smwyg_block_view($delta = '') {
  $block = [];

  switch ($delta) {
    case 'smwyg_test_display' :
      $block['content'] = smwyg_block_view_smwyg_test_display();
      break;
  }

  return $block;
}

function smwyg_block_view_smwyg_test_display() {
  $current_path = current_path();
  $current_path_alias = request_path();

  $query = db_select('smwyg', 's')
    ->fields('s', [])
    ->condition('path', $current_path_alias)
  ;
  dpq($query);
  $results = $query->execute()->fetch();
  dpm($results);
  return 'this is a test';
}